using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class SelectedCharacters : MonoBehaviour
{
    SelectedCharacters.Data data = new SelectedCharacters.Data();
    private int i;

    public item Item;

    public GameObject[] AllCharacters;
    public GameObject ArrowLeft;
    public GameObject ArrowRight;

    public GameObject ButtonBuyCharacter;
    public GameObject ButtonSelectCharacter;
    public GameObject TextSelectCharacter;

    private string statusCheck;
    private int check;

    public Text TextPrice;
   

    [System.Serializable]

    public class Data
    {
       public string currentCharacter = "Farmer";
       public List<string> haveCharacters = new List<string> {"Farmer"};
       public int money;
    }
    
    void Start()
    {
        if(PlayerPrefs.HasKey("SaveGame"))
        {
            data.money = 500;
            data = JsonUtility.FromJson<SelectedCharacters.Data>(PlayerPrefs.GetString("SaveGame"));
        }
        else
        {
            PlayerPrefs.SetString("SaveGame", JsonUtility.ToJson(data));
        }

        AllCharacters[i].SetActive(true);

        if(data.currentCharacter == AllCharacters[i].name)
        {
            ButtonBuyCharacter.SetActive(false);
            ButtonSelectCharacter.SetActive(false);
            TextSelectCharacter.SetActive(true);
        }

        else if (data.currentCharacter == AllCharacters[i].name)
        {
            StartCoroutine(CheckHaveCharacter());
        }


        if(i > 0)
        {
            ArrowLeft.SetActive(true);
        }

        if(i == AllCharacters.Length)
        {
            ArrowRight.SetActive(false);
        }
    }

    public IEnumerator CheckHaveCharacter()
    {
        while(statusCheck != "Check")
        {
           if(data.haveCharacters.Count != check)
           {
             if(AllCharacters[i].name != data.haveCharacters[check])
             {
                check++;
             }
             else if (AllCharacters[i].name == data.haveCharacters[check])
             {
                TextSelectCharacter.SetActive(false);
                ButtonBuyCharacter.SetActive(false);
                ButtonSelectCharacter.SetActive(true);
                check = 0;
                statusCheck = "Check";
             }
           }
           else if (data.haveCharacters.Count == check)
           {
            ButtonSelectCharacter.SetActive(false);
            TextSelectCharacter.SetActive(false);
            ButtonBuyCharacter.SetActive(true);
            TextPrice.text = AllCharacters[i].GetComponent<item>().priceCharacter.ToString();
            check = 0;
            statusCheck = "Check";
           }
        }

        statusCheck = "";
        
        
        yield return null;
    }


    public void ArrowR()
    {
        if(i < AllCharacters.Length)
        {
            if(i == 0)
            {
                ArrowLeft.SetActive(true);
            }

            AllCharacters[i].SetActive(false);
            i++;
            AllCharacters[i].SetActive(true);
                       
            if(data.currentCharacter == AllCharacters[i].name)
        {
            ButtonBuyCharacter.SetActive(false);
            ButtonSelectCharacter.SetActive(false);
            TextSelectCharacter.SetActive(true);
        }

        else if (data.currentCharacter == AllCharacters[i].name)
        {
            StartCoroutine(CheckHaveCharacter());
        }

            if(i + 1 == AllCharacters.Length)
            {
                ArrowRight.SetActive(false);
            }
        }
    }

    public void ArrowL()
    {
        if(i < AllCharacters.Length)
        {
            AllCharacters[i].SetActive(false);
            i--;
            AllCharacters[i].SetActive(true);
            ArrowRight.SetActive(true);
            
            if(data.currentCharacter == AllCharacters[i].name)
        {
            ButtonBuyCharacter.SetActive(false);
            ButtonSelectCharacter.SetActive(false);
            TextSelectCharacter.SetActive(true);
        }

        else if (data.currentCharacter == AllCharacters[i].name)
        {
            StartCoroutine(CheckHaveCharacter());
        }

            if(i == 0)
            {
                ArrowLeft.SetActive(false);
            }           
        }
    }

    public void SelectCharacter()
    {
        data = JsonUtility.FromJson<SelectedCharacters.Data>(PlayerPrefs.GetString("SaveGame"));
        data.currentCharacter = AllCharacters[i].name;
        PlayerPrefs.SetString("SaveGame", JsonUtility.ToJson(data));

        ButtonSelectCharacter.SetActive(false);
        TextSelectCharacter.SetActive(true);    
    }

    public void BuyCharacter()
    {
        if(data.money >= AllCharacters[i].GetComponent<item>().priceCharacter)
        {
        data = JsonUtility.FromJson<SelectedCharacters.Data>(PlayerPrefs.GetString("SaveGame"));
        data.money = data.money - AllCharacters[i].GetComponent<item>().priceCharacter;
        data.haveCharacters.Add(AllCharacters[i].name);
        PlayerPrefs.SetString("SaveGame", JsonUtility.ToJson(data));
        
        ButtonBuyCharacter.SetActive(false);
        ButtonSelectCharacter.SetActive(true);              
        }
  
    }
}
